services:
  easy-post-ia-back:
    build:
      context: .
      dockerfile: Dockerfile
    # command: bash -c "./bin/docker-entrypoint"
    user: root
    image: easy-post-ia-back:${ENVIRONMENT_RAILS}
    container_name: easy-post-ia-back
    restart: on-failure:2
    tty: true
    stdin_open: true
    env_file:
      - .env
    depends_on:
      easy-post-ia-postgresdb:
        condition: service_healthy
      easy-post-ia-redis:
        condition: service_started
    ports:
      - "${API_PORT}:${API_PORT}"
    volumes:
      - .:/rails
      # - bundle:/usr/local/bundle
    healthcheck:
      test: ["CMD", "/bin/bash", "-c", "./healthcheck.sh"]
      interval: 200s
      retries: 3
      start_period: 50s
      timeout: 10s
    networks:
      - easy-post-ia-backend-network
  easy-post-ia-postgresdb:
    container_name: easy-post-ia-pg_db
    image: postgres:16.9
    ports:
      - "${POSTGRES_DB_PORT}:${POSTGRES_DB_PORT}"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_DB_PASSWD}
      - POSTGRES_USER=${POSTGRES_DB_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U postgres
      interval: 2s
      timeout: 5s
      retries: 10
    networks:
      - easy-post-ia-backend-network
  easy-post-ia-redis:
    container_name: easy-post-ia-redis
    image: redis
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 200s
      retries: 5
      start_period: 10s
      timeout: 10s
    ports:
      - "6379:6379"
    networks:
      - easy-post-ia-backend-network
  easy-post-ia-sidekiq:
    build: ./
    container_name: easy-post-ia-sidekiq
    command: bundle exec sidekiq -C /rails/config/sidekiq.yml
    depends_on:
      - easy-post-ia-redis
      - easy-post-ia-postgresdb
      - easy-post-ia-back
    volumes:
      - .:/rails
    env_file:
      - .env
    networks:
      - easy-post-ia-backend-network

networks:
  easy-post-ia-backend-network:
    driver: bridge
volumes:
  pg_data:
  redis_data:
  # bundle:
